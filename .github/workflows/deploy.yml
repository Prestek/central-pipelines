name: Centralized Deploy to EC2

on:
  workflow_call:
    inputs:
      PROJECT_NAME:
        description: 'Project folder name on the EC2 instance'
        required: true
        type: string
      IMAGE_NAME:
        description: 'Docker Image Name'
        required: true
        type: string
      CONTAINER_NAME:
        description: 'Container Name'
        required: true
        type: string
      PORT:
        description: 'Port Number'
        required: true
        type: string
      REPO_URL:
        description: 'Repository URL to clone'
        required: true
        type: string
      BRANCH:
        description: 'Git branch to deploy'
        required: true
        type: string
    secrets:
      EC2_SSH_KEY:
        required: true
      EC2_HOST:
        required: true
      EC2_USER:
        required: true
      AWS_SECRET_ARN:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest  # Se ejecuta en una VM de GitHub Actions

    steps:
      - name: 🚀 Checkout del repositorio (para disponer de este workflow)
        uses: actions/checkout@v4

      - name: 📂 Conectar por SSH y desplegar en EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          AWS_SECRET_ARN: ${{ secrets.AWS_SECRET_ARN }}
          IMAGE_NAME: ${{ inputs.IMAGE_NAME }}
          CONTAINER_NAME: ${{ inputs.CONTAINER_NAME }}
          PORT: ${{ inputs.PORT }}
          REPO_URL: ${{ inputs.REPO_URL }}
          PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
          BRANCH: ${{ inputs.BRANCH }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << EOF
            set -e

            echo "🔄 Actualizando el sistema e instalando Git y Docker..."
            # Comandos para Amazon Linux; ajusta si usas otro sistema
            sudo yum update -y
            sudo yum install -y git docker jq
            sudo service docker start

            sudo docker system prune -a --volumes -f

            echo "🚀 Forzando actualización del código..."
            if [ -d ~/"$PROJECT_NAME/.git" ]; then
              echo "📂 El proyecto ya existe. Actualizando..."
              cd ~/"$PROJECT_NAME"
              sudo git fetch --all
              sudo git reset --hard origin/"$BRANCH"
            else
              echo "📦 El proyecto no existe o no es un repositorio Git. Clonando..."
              cd ~
              sudo rm -rf "$PROJECT_NAME"  # Elimina cualquier carpeta con el mismo nombre
              sudo git clone "$REPO_URL" "$PROJECT_NAME"
              cd "$PROJECT_NAME"
              sudo git checkout "$BRANCH"
            fi


            echo "🔄 Verificando y reemplazando el keystore..."
            if [ -f ~/ecikeystore.p12 ]; then
              echo "✅ Keystore encontrado. Copiando..."
              sudo cp ~/ecikeystore.p12 ~/"$PROJECT_NAME"/src/main/resources/ecikeystore.p12
            else
              echo "⚠️ Keystore no encontrado en ~/ecikeystore.p12. Saltando..."
            fi

            echo "📚 Obteniendo secretos..."
            sudo aws secretsmanager get-secret-value --secret-id "$AWS_SECRET_ARN" --region us-east-1 --query SecretString --output text | jq -r 'to_entries | map("\(.key)=\(.value)") | .[]' | sudo tee .env > /dev/null

            echo "🛠️ Construyendo imagen Docker..."
            sudo docker build -t "$IMAGE_NAME" .

            echo "🚫 Deteniendo contenedor previo..."
            sudo docker stop "$CONTAINER_NAME" || true
            sudo docker rm "$CONTAINER_NAME" || true

            echo "🚀 Ejecutando nuevo contenedor..."
            sudo docker run -d --name "$CONTAINER_NAME" --env-file .env -p "$PORT":"$PORT" "$IMAGE_NAME"

            echo "🎉 Despliegue exitoso en EC2"
          EOF
